/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Coordinator_H
#define Coordinator_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "distributedML_types.h"

namespace distributedML {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CoordinatorIf {
 public:
  virtual ~CoordinatorIf() {}
  virtual void load_compute_nodes(std::vector<ComputeNodeInfo> & _return, const std::string& filename) = 0;
  virtual double train(const std::string& dir, const int32_t rounds, const int32_t epochs, const int32_t h, const int32_t k, const double eta, const std::string& compute_nodes_file) = 0;
};

class CoordinatorIfFactory {
 public:
  typedef CoordinatorIf Handler;

  virtual ~CoordinatorIfFactory() {}

  virtual CoordinatorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CoordinatorIf* /* handler */) = 0;
  };

class CoordinatorIfSingletonFactory : virtual public CoordinatorIfFactory {
 public:
  CoordinatorIfSingletonFactory(const ::std::shared_ptr<CoordinatorIf>& iface) : iface_(iface) {}
  virtual ~CoordinatorIfSingletonFactory() {}

  virtual CoordinatorIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(CoordinatorIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<CoordinatorIf> iface_;
};

class CoordinatorNull : virtual public CoordinatorIf {
 public:
  virtual ~CoordinatorNull() {}
  void load_compute_nodes(std::vector<ComputeNodeInfo> & /* _return */, const std::string& /* filename */) override {
    return;
  }
  double train(const std::string& /* dir */, const int32_t /* rounds */, const int32_t /* epochs */, const int32_t /* h */, const int32_t /* k */, const double /* eta */, const std::string& /* compute_nodes_file */) override {
    double _return = 0.0;
    return _return;
  }
};

typedef struct _Coordinator_load_compute_nodes_args__isset {
  _Coordinator_load_compute_nodes_args__isset() : filename(false) {}
  bool filename :1;
} _Coordinator_load_compute_nodes_args__isset;

class Coordinator_load_compute_nodes_args {
 public:

  Coordinator_load_compute_nodes_args(const Coordinator_load_compute_nodes_args&);
  Coordinator_load_compute_nodes_args& operator=(const Coordinator_load_compute_nodes_args&);
  Coordinator_load_compute_nodes_args() noexcept
                                      : filename() {
  }

  virtual ~Coordinator_load_compute_nodes_args() noexcept;
  std::string filename;

  _Coordinator_load_compute_nodes_args__isset __isset;

  void __set_filename(const std::string& val);

  bool operator == (const Coordinator_load_compute_nodes_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const Coordinator_load_compute_nodes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Coordinator_load_compute_nodes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Coordinator_load_compute_nodes_pargs {
 public:


  virtual ~Coordinator_load_compute_nodes_pargs() noexcept;
  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Coordinator_load_compute_nodes_result__isset {
  _Coordinator_load_compute_nodes_result__isset() : success(false) {}
  bool success :1;
} _Coordinator_load_compute_nodes_result__isset;

class Coordinator_load_compute_nodes_result {
 public:

  Coordinator_load_compute_nodes_result(const Coordinator_load_compute_nodes_result&);
  Coordinator_load_compute_nodes_result& operator=(const Coordinator_load_compute_nodes_result&);
  Coordinator_load_compute_nodes_result() noexcept {
  }

  virtual ~Coordinator_load_compute_nodes_result() noexcept;
  std::vector<ComputeNodeInfo>  success;

  _Coordinator_load_compute_nodes_result__isset __isset;

  void __set_success(const std::vector<ComputeNodeInfo> & val);

  bool operator == (const Coordinator_load_compute_nodes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Coordinator_load_compute_nodes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Coordinator_load_compute_nodes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Coordinator_load_compute_nodes_presult__isset {
  _Coordinator_load_compute_nodes_presult__isset() : success(false) {}
  bool success :1;
} _Coordinator_load_compute_nodes_presult__isset;

class Coordinator_load_compute_nodes_presult {
 public:


  virtual ~Coordinator_load_compute_nodes_presult() noexcept;
  std::vector<ComputeNodeInfo> * success;

  _Coordinator_load_compute_nodes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Coordinator_train_args__isset {
  _Coordinator_train_args__isset() : dir(false), rounds(false), epochs(false), h(false), k(false), eta(false), compute_nodes_file(false) {}
  bool dir :1;
  bool rounds :1;
  bool epochs :1;
  bool h :1;
  bool k :1;
  bool eta :1;
  bool compute_nodes_file :1;
} _Coordinator_train_args__isset;

class Coordinator_train_args {
 public:

  Coordinator_train_args(const Coordinator_train_args&);
  Coordinator_train_args& operator=(const Coordinator_train_args&);
  Coordinator_train_args() noexcept
                         : dir(),
                           rounds(0),
                           epochs(0),
                           h(0),
                           k(0),
                           eta(0),
                           compute_nodes_file() {
  }

  virtual ~Coordinator_train_args() noexcept;
  std::string dir;
  int32_t rounds;
  int32_t epochs;
  int32_t h;
  int32_t k;
  double eta;
  std::string compute_nodes_file;

  _Coordinator_train_args__isset __isset;

  void __set_dir(const std::string& val);

  void __set_rounds(const int32_t val);

  void __set_epochs(const int32_t val);

  void __set_h(const int32_t val);

  void __set_k(const int32_t val);

  void __set_eta(const double val);

  void __set_compute_nodes_file(const std::string& val);

  bool operator == (const Coordinator_train_args & rhs) const
  {
    if (!(dir == rhs.dir))
      return false;
    if (!(rounds == rhs.rounds))
      return false;
    if (!(epochs == rhs.epochs))
      return false;
    if (!(h == rhs.h))
      return false;
    if (!(k == rhs.k))
      return false;
    if (!(eta == rhs.eta))
      return false;
    if (!(compute_nodes_file == rhs.compute_nodes_file))
      return false;
    return true;
  }
  bool operator != (const Coordinator_train_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Coordinator_train_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Coordinator_train_pargs {
 public:


  virtual ~Coordinator_train_pargs() noexcept;
  const std::string* dir;
  const int32_t* rounds;
  const int32_t* epochs;
  const int32_t* h;
  const int32_t* k;
  const double* eta;
  const std::string* compute_nodes_file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Coordinator_train_result__isset {
  _Coordinator_train_result__isset() : success(false) {}
  bool success :1;
} _Coordinator_train_result__isset;

class Coordinator_train_result {
 public:

  Coordinator_train_result(const Coordinator_train_result&) noexcept;
  Coordinator_train_result& operator=(const Coordinator_train_result&) noexcept;
  Coordinator_train_result() noexcept
                           : success(0) {
  }

  virtual ~Coordinator_train_result() noexcept;
  double success;

  _Coordinator_train_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Coordinator_train_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Coordinator_train_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Coordinator_train_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Coordinator_train_presult__isset {
  _Coordinator_train_presult__isset() : success(false) {}
  bool success :1;
} _Coordinator_train_presult__isset;

class Coordinator_train_presult {
 public:


  virtual ~Coordinator_train_presult() noexcept;
  double* success;

  _Coordinator_train_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CoordinatorClient : virtual public CoordinatorIf {
 public:
  CoordinatorClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CoordinatorClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void load_compute_nodes(std::vector<ComputeNodeInfo> & _return, const std::string& filename) override;
  void send_load_compute_nodes(const std::string& filename);
  void recv_load_compute_nodes(std::vector<ComputeNodeInfo> & _return);
  double train(const std::string& dir, const int32_t rounds, const int32_t epochs, const int32_t h, const int32_t k, const double eta, const std::string& compute_nodes_file) override;
  void send_train(const std::string& dir, const int32_t rounds, const int32_t epochs, const int32_t h, const int32_t k, const double eta, const std::string& compute_nodes_file);
  double recv_train();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CoordinatorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<CoordinatorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (CoordinatorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_load_compute_nodes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_train(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CoordinatorProcessor(::std::shared_ptr<CoordinatorIf> iface) :
    iface_(iface) {
    processMap_["load_compute_nodes"] = &CoordinatorProcessor::process_load_compute_nodes;
    processMap_["train"] = &CoordinatorProcessor::process_train;
  }

  virtual ~CoordinatorProcessor() {}
};

class CoordinatorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CoordinatorProcessorFactory(const ::std::shared_ptr< CoordinatorIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< CoordinatorIfFactory > handlerFactory_;
};

class CoordinatorMultiface : virtual public CoordinatorIf {
 public:
  CoordinatorMultiface(std::vector<std::shared_ptr<CoordinatorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CoordinatorMultiface() {}
 protected:
  std::vector<std::shared_ptr<CoordinatorIf> > ifaces_;
  CoordinatorMultiface() {}
  void add(::std::shared_ptr<CoordinatorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void load_compute_nodes(std::vector<ComputeNodeInfo> & _return, const std::string& filename) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load_compute_nodes(_return, filename);
    }
    ifaces_[i]->load_compute_nodes(_return, filename);
    return;
  }

  double train(const std::string& dir, const int32_t rounds, const int32_t epochs, const int32_t h, const int32_t k, const double eta, const std::string& compute_nodes_file) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->train(dir, rounds, epochs, h, k, eta, compute_nodes_file);
    }
    return ifaces_[i]->train(dir, rounds, epochs, h, k, eta, compute_nodes_file);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CoordinatorConcurrentClient : virtual public CoordinatorIf {
 public:
  CoordinatorConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  CoordinatorConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void load_compute_nodes(std::vector<ComputeNodeInfo> & _return, const std::string& filename) override;
  int32_t send_load_compute_nodes(const std::string& filename);
  void recv_load_compute_nodes(std::vector<ComputeNodeInfo> & _return, const int32_t seqid);
  double train(const std::string& dir, const int32_t rounds, const int32_t epochs, const int32_t h, const int32_t k, const double eta, const std::string& compute_nodes_file) override;
  int32_t send_train(const std::string& dir, const int32_t rounds, const int32_t epochs, const int32_t h, const int32_t k, const double eta, const std::string& compute_nodes_file);
  double recv_train(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
