/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ComputeNode_H
#define ComputeNode_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "distributedML_types.h"

namespace distributedML {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ComputeNodeIf {
 public:
  virtual ~ComputeNodeIf() {}
  virtual void trainModel(Gradient& _return, const Weights& weights, const std::string& trainFile, const double eta, const int32_t epochs) = 0;
};

class ComputeNodeIfFactory {
 public:
  typedef ComputeNodeIf Handler;

  virtual ~ComputeNodeIfFactory() {}

  virtual ComputeNodeIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ComputeNodeIf* /* handler */) = 0;
  };

class ComputeNodeIfSingletonFactory : virtual public ComputeNodeIfFactory {
 public:
  ComputeNodeIfSingletonFactory(const ::std::shared_ptr<ComputeNodeIf>& iface) : iface_(iface) {}
  virtual ~ComputeNodeIfSingletonFactory() {}

  virtual ComputeNodeIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(ComputeNodeIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<ComputeNodeIf> iface_;
};

class ComputeNodeNull : virtual public ComputeNodeIf {
 public:
  virtual ~ComputeNodeNull() {}
  void trainModel(Gradient& /* _return */, const Weights& /* weights */, const std::string& /* trainFile */, const double /* eta */, const int32_t /* epochs */) override {
    return;
  }
};

typedef struct _ComputeNode_trainModel_args__isset {
  _ComputeNode_trainModel_args__isset() : weights(false), trainFile(false), eta(false), epochs(false) {}
  bool weights :1;
  bool trainFile :1;
  bool eta :1;
  bool epochs :1;
} _ComputeNode_trainModel_args__isset;

class ComputeNode_trainModel_args {
 public:

  ComputeNode_trainModel_args(const ComputeNode_trainModel_args&);
  ComputeNode_trainModel_args& operator=(const ComputeNode_trainModel_args&);
  ComputeNode_trainModel_args() noexcept
                              : trainFile(),
                                eta(0),
                                epochs(0) {
  }

  virtual ~ComputeNode_trainModel_args() noexcept;
  Weights weights;
  std::string trainFile;
  double eta;
  int32_t epochs;

  _ComputeNode_trainModel_args__isset __isset;

  void __set_weights(const Weights& val);

  void __set_trainFile(const std::string& val);

  void __set_eta(const double val);

  void __set_epochs(const int32_t val);

  bool operator == (const ComputeNode_trainModel_args & rhs) const
  {
    if (!(weights == rhs.weights))
      return false;
    if (!(trainFile == rhs.trainFile))
      return false;
    if (!(eta == rhs.eta))
      return false;
    if (!(epochs == rhs.epochs))
      return false;
    return true;
  }
  bool operator != (const ComputeNode_trainModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComputeNode_trainModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComputeNode_trainModel_pargs {
 public:


  virtual ~ComputeNode_trainModel_pargs() noexcept;
  const Weights* weights;
  const std::string* trainFile;
  const double* eta;
  const int32_t* epochs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComputeNode_trainModel_result__isset {
  _ComputeNode_trainModel_result__isset() : success(false) {}
  bool success :1;
} _ComputeNode_trainModel_result__isset;

class ComputeNode_trainModel_result {
 public:

  ComputeNode_trainModel_result(const ComputeNode_trainModel_result&);
  ComputeNode_trainModel_result& operator=(const ComputeNode_trainModel_result&);
  ComputeNode_trainModel_result() noexcept {
  }

  virtual ~ComputeNode_trainModel_result() noexcept;
  Gradient success;

  _ComputeNode_trainModel_result__isset __isset;

  void __set_success(const Gradient& val);

  bool operator == (const ComputeNode_trainModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ComputeNode_trainModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComputeNode_trainModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComputeNode_trainModel_presult__isset {
  _ComputeNode_trainModel_presult__isset() : success(false) {}
  bool success :1;
} _ComputeNode_trainModel_presult__isset;

class ComputeNode_trainModel_presult {
 public:


  virtual ~ComputeNode_trainModel_presult() noexcept;
  Gradient* success;

  _ComputeNode_trainModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ComputeNodeClient : virtual public ComputeNodeIf {
 public:
  ComputeNodeClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ComputeNodeClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void trainModel(Gradient& _return, const Weights& weights, const std::string& trainFile, const double eta, const int32_t epochs) override;
  void send_trainModel(const Weights& weights, const std::string& trainFile, const double eta, const int32_t epochs);
  void recv_trainModel(Gradient& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ComputeNodeProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ComputeNodeIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (ComputeNodeProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_trainModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ComputeNodeProcessor(::std::shared_ptr<ComputeNodeIf> iface) :
    iface_(iface) {
    processMap_["trainModel"] = &ComputeNodeProcessor::process_trainModel;
  }

  virtual ~ComputeNodeProcessor() {}
};

class ComputeNodeProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ComputeNodeProcessorFactory(const ::std::shared_ptr< ComputeNodeIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< ComputeNodeIfFactory > handlerFactory_;
};

class ComputeNodeMultiface : virtual public ComputeNodeIf {
 public:
  ComputeNodeMultiface(std::vector<std::shared_ptr<ComputeNodeIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ComputeNodeMultiface() {}
 protected:
  std::vector<std::shared_ptr<ComputeNodeIf> > ifaces_;
  ComputeNodeMultiface() {}
  void add(::std::shared_ptr<ComputeNodeIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void trainModel(Gradient& _return, const Weights& weights, const std::string& trainFile, const double eta, const int32_t epochs) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->trainModel(_return, weights, trainFile, eta, epochs);
    }
    ifaces_[i]->trainModel(_return, weights, trainFile, eta, epochs);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ComputeNodeConcurrentClient : virtual public ComputeNodeIf {
 public:
  ComputeNodeConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ComputeNodeConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void trainModel(Gradient& _return, const Weights& weights, const std::string& trainFile, const double eta, const int32_t epochs) override;
  int32_t send_trainModel(const Weights& weights, const std::string& trainFile, const double eta, const int32_t epochs);
  void recv_trainModel(Gradient& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
