// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "./gen-cpp/ComputeNode.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <iostream>
#include "./ML/ML/ML.hpp"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::distributedML;

class ComputeNodeHandler : virtual public ComputeNodeIf {
 public:
  ComputeNodeHandler() {
    // Your initialization goes here
  }

  void trainModel(Gradient& _return, const Weights& weights, const std::string& trainFile, const double eta, const int32_t epochs) {
    std::cout << "Compute Node training " << trainFile << std::endl;
    mlp local_model;

    std::vector<std::vector<double>> W = weights.W;
    std::vector<std::vector<double>> V = weights.V;
    std::vector<std::vector<double>> W_original = W;
    std::vector<std::vector<double>> V_original = V;

    local_model.init_training_model(trainFile, V, W);

    double error = local_model.train(eta, epochs);

    local_model.get_weights(W, V);

    calc_gradient(W, W_original);
    calc_gradient(V, V_original);


    _return.dW = W;
    _return.dV = V;
  }

};

int main(int argc, char **argv) {
  if (argc != 3) {
    std::cout << "Usage: ./compute_node <port> <load_probability>" << std::endl;
    exit(1);
  }

  int port = std::stoi(argv[1]);
  double load_probability = std::stod(argv[2]);
  ::std::shared_ptr<ComputeNodeHandler> handler(new ComputeNodeHandler());
  ::std::shared_ptr<TProcessor> processor(new ComputeNodeProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}
